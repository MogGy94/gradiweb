{"version":3,"sources":["Views/Styles.js","Views/teststylesgrid.js","assets/Cloudy.jsx","Views/WeatherApp.jsx","serviceWorker.js","index.js"],"names":["center","display","alignItems","justifyContent","Styles","grid","gridArea","margin","background","gridTemplateColumns","gridTemplateRows","width","height","mainDisplay","seconDisplay","forecast","placeToVicit","location","item0","item1","Cloud","props","color","scale","fill","version","id","xmlns","x","y","viewBox","d","defaultProps","rate","memo","Items","Item","style","name","List","i","key","console","log","WeatherApp","useEffect","test","className","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2LAAMA,EAAS,CACXC,QAAS,OACTC,WAAY,SACZC,eAAgB,UA4DLC,EAzDA,CACXC,KAAK,CACDC,SAAU,gBACVC,OAAQ,MACRC,WAAY,WACZP,QAAS,OAETQ,oBAAqB,iBACrBC,iBAAkB,gBAMlBC,MAAO,OACPC,OAAQ,QAGZC,YAAY,aACRP,SAAU,iBACVE,WAAY,aACTR,GAEPc,aAAa,aACTR,SAAU,gBACVE,WAAY,aACTR,GAEPe,SAAS,aACLT,SAAU,gBACVE,WAAY,aACTR,GAEPgB,aAAa,aACTV,SAAU,iBACVE,WAAY,aACTR,GAEPiB,SAAS,aACLX,SAAU,kBACVE,WAAY,aACTR,GAIPkB,MAAM,aACFV,WAAY,WACTR,GAEPmB,MAAM,aACFX,WAAY,WACTR,IC9CII,EAXA,CACXC,KAAK,CACDJ,QAAS,OAETQ,oBAAqB,gBACrBC,iBAAkB,gBAElBC,MAAO,QACPC,OAAQ,U,OCNVQ,EAAQ,SAACC,GAAU,IAChBC,EAAeD,EAAfC,MAAMC,EAASF,EAATE,MAKX,OACI,qCACIC,KAAMF,EACNG,QAAQ,MACRC,GAAG,UACHC,MAAM,6BACNC,EAAE,MAAMC,EAAE,MACVC,QAAQ,YACRnB,MAAK,UAZL,GAYcY,EAAT,MAAoBX,OAAM,UAX/B,GAWwCW,EAAT,OAPnC,wBALI,GAKJ,YAJI,KAcJ,0BAAMQ,EAAE,+0BAYhBX,EAAMY,aAAc,CAChBV,MAAQ,UACRW,KAAQ,EACRV,MAAO,GAGIW,eAAKd,GCLpB,IAAMe,EAAQ,WAGb,IAFA,IAAMC,EAAQ,SAAAf,GAAK,OAAI,yBAAKgB,MAAOhB,EAAMiB,KAAK,GAAG,EAAIlC,EAAOc,MAAMd,EAAOe,OAAlD,IAA4DE,EAAMiB,KAAlE,MACnBC,EAAO,GACFC,EAAI,EAAIA,EAAK,IAAIA,IAEzBD,EAAI,sBAAOA,GAAP,CAAY,kBAACH,EAAD,CAAMK,IAAG,cAASD,GAAKF,KAAOE,EAAE,MAGjD,OADCE,QAAQC,IAAIJ,GACNA,GAGOK,EApCf,WAOE,OAJAC,qBAAU,cAER,IAGA,yBAAMR,MAAOS,EAAKzC,MACd,yBAAKgC,MAAOjC,EAAOC,KAAM0C,UAAU,gBAChCZ,KAEL,yBAAKE,MAAOjC,EAAOC,KAAM0C,UAAU,gBACjC,6BAAUV,MAAOjC,EAAOS,YAAakC,UAAU,eAA/C,eACA,6BAAUV,MAAOjC,EAAOU,aAAciC,UAAU,gBAAhD,gBACA,6BAAUV,MAAOjC,EAAOW,SAAUgC,UAAU,YAA5C,YACA,6BAAUV,MAAOjC,EAAOY,aAAc+B,UAAU,gBAAhD,gBACA,6BAAUV,MAAOjC,EAAOa,SAAU8B,UAAU,YAA5C,eCZYC,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.638bad5f.chunk.js","sourcesContent":["const center = {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n}\r\n\r\nconst Styles = {\r\n    grid:{\r\n        gridArea: \"1 / 1 / 2 / 2\",\r\n        margin: \"1vh\",\r\n        background: \"#fabf0e9\",\r\n        display: \"grid\",\r\n        //gridTemplateColumns: \"repeat(8,minmax(1em,1fr))\",\r\n        gridTemplateColumns: \"repeat(13,1fr)\",\r\n        gridTemplateRows: \"repeat(8,1fr)\",\r\n        //gridTemplateRows: \"repeat(4,1fr)\",\r\n       \r\n       /*  gridGap: \"10px\", */\r\n       // gridAutoFlow: \"dense\",\r\n       \r\n        width: \"99vw\",\r\n        height: \"97vh\"\r\n    },\r\n    \r\n    mainDisplay:{\r\n        gridArea: \"1 / 1 / 5 / 14\",\r\n        background: \"#b6eb7a99\",\r\n        ...center\r\n    },\r\n    seconDisplay:{\r\n        gridArea: \"5 / 1 / 9 / 4\",\r\n        background: \"#65406299\",\r\n        ...center\r\n    },\r\n    forecast:{\r\n        gridArea: \"5 / 4 / 9 / 7\",\r\n        background: \"#fb781399\",\r\n        ...center\r\n    },\r\n    placeToVicit:{\r\n        gridArea: \"5 / 7 / 9 / 10\",\r\n        background: \"#ffcac299\",\r\n        ...center\r\n    },\r\n    location:{\r\n        gridArea: \"5 / 10 / 9 / 14\",\r\n        background: \"#17706e99\",\r\n        ...center\r\n    },\r\n\r\n\r\n    item0:{\r\n        background: \"#aaaaaa\",\r\n        ...center\r\n    },\r\n    item1:{\r\n        background: \"#777777\",\r\n        ...center\r\n    },\r\n\r\n}\r\n\r\n\r\nexport default Styles;","const Styles = {\r\n    grid:{\r\n        display: \"grid\",\r\n    \r\n        gridTemplateColumns: \"repeat(1,1fr)\",\r\n        gridTemplateRows: \"repeat(1,1fr)\",\r\n       \r\n        width: \"100vw\",\r\n        height: \"100vh\"\r\n    },\r\n}\r\nexport default Styles;","import React ,{memo} from 'react';\r\n\r\nconst Cloud = (props) =>{\r\n    var {color,scale} = props\r\n    var w = 30 //* rate ;\r\n    var h = 30 //* rate; \r\n    var r = 6;\r\n    var s_W = 5;\r\n    return(\r\n        <svg \r\n            fill={color}\r\n            version=\"1.1\" \r\n            id=\"Layer_1\" \r\n            xmlns=\"http://www.w3.org/2000/svg\" \r\n            x=\"0px\" y=\"0px\"\r\n            viewBox=\"0 0 30 30\" \r\n            width={`${w * scale}px`} height={`${h * scale}px`}\r\n            viewBox={`0 0 ${w} ${h}`} \r\n            >\r\n        <path d=\"M4.61,16.88c0-1.15,0.36-2.17,1.08-3.07c0.72-0.9,1.63-1.48,2.74-1.73c0.31-1.37,1.02-2.49,2.11-3.37s2.35-1.32,3.76-1.32\r\n            c1.38,0,2.61,0.43,3.69,1.28s1.78,1.95,2.1,3.29h0.33c0.9,0,1.73,0.22,2.49,0.65s1.37,1.03,1.81,1.79c0.44,0.76,0.67,1.58,0.67,2.48\r\n            c0,0.88-0.21,1.7-0.63,2.45s-1,1.35-1.73,1.8c-0.73,0.45-1.54,0.69-2.41,0.72H9.41c-1.34-0.06-2.47-0.57-3.4-1.53\r\n            C5.08,19.37,4.61,18.22,4.61,16.88z M6.32,16.88c0,0.87,0.3,1.62,0.9,2.26s1.33,0.98,2.19,1.03h11.19c0.86-0.04,1.59-0.39,2.19-1.03\r\n            c0.61-0.64,0.91-1.4,0.91-2.26c0-0.88-0.33-1.63-0.98-2.27c-0.65-0.64-1.42-0.96-2.32-0.96H18.8c-0.11,0-0.17-0.06-0.17-0.18\r\n            l-0.07-0.57c-0.11-1.08-0.58-1.99-1.4-2.72c-0.82-0.73-1.77-1.1-2.86-1.1c-1.09,0-2.05,0.37-2.85,1.1\r\n            c-0.81,0.73-1.27,1.64-1.37,2.72l-0.08,0.57c0,0.12-0.07,0.18-0.2,0.18H9.27c-0.84,0.1-1.54,0.46-2.1,1.07S6.32,16.05,6.32,16.88z\"\r\n            />\r\n        </svg>\r\n    )\r\n}\r\n\r\nCloud.defaultProps ={\r\n    color : \"#ffffff\",\r\n    rate  : 1,\r\n    scale: 6,\r\n}\r\n\r\nexport default memo(Cloud);\r\n\r\n","import React,{useEffect} from 'react';\nimport Styles from \"./Styles\"\nimport test from \"./teststylesgrid\";\nimport Cloudy from '../assets/Cloudy';\n\nimport whather from \"../services/requesWeatherService\";\n\nfunction WeatherApp() {\n\n  \n  useEffect(()=>{\n    //whather(\"Paris\")\n  },[])\n\n  return (\n    <div  style={test.grid}>\n        <div style={Styles.grid} className=\"appContainer\">\n          {Items()}\n        </div>\n      <div style={Styles.grid} className=\"appContainer\">\n        <section  style={Styles.mainDisplay} className=\"mainDisplay\">mainDisplay</section>\n        <section  style={Styles.seconDisplay} className=\"seconDisplay\">seconDisplay</section>\n        <section  style={Styles.forecast} className=\"forecast\">forecast</section>\n        <section  style={Styles.placeToVicit} className=\"placeToVicit\">placeToVicit</section>\n        <section  style={Styles.location} className=\"location\">location</section>  \n      </div>\n    </div>\n    \n  );\n}\n\n\nconst Items = () =>{\n const Item  = props => <div style={props.name%2==0 ? Styles.item0:Styles.item1 }> {props.name} </div>\n let List = []; \n for (var i = 0 ; i <  104;i++){\n  //console.log(i);\n  List = [...List,<Item key={`key-${i}`} name ={i+1} />]\n  }\n  console.log(List);\n return List;\n}\n\nexport default WeatherApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WeatherApp from './Views/WeatherApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}